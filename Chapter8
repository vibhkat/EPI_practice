template<class T>
struct Node{
 T data;
Node *next;
};


=====================================================================================================================
//8.1
// time complexity 0(n+m)
Node<int>* merge(Node *L1 ,Node *L2)
{
	Node<int> *head = *tail = NULL;
	while(L1 && L2 )
	{
		if( L1->data < L2->data)
		{
			if(head == NULL) head= tail = L1;
			else{	
				tail -> next = L1;
				tail = tail -> next;
			}
			L1 = L1 -> next;
		}				
		else
		{
			if(head == NULL) head= tail = L2;
			else{	
				tail -> next = L2;
				tail = tail -> next;
			}
			L2 = L2 -> next;
		}
	}	
		
	tail -> next = L1 ?L1:L2;// in case one of the list is fully scanned and other is left so we will have to atach it to the tail
	return head 
}


========================================================================================================================
//8.2
//Recursive way
// Time complexity is 'n' and space complexity is 'n'
void reverseLinkedList( Node<int> *node)
{
	if( node -> next == NULL)
	{
		Head = node;
		return ;
	}

	reverseLinkedList( node -> next);
	Node<int> *temp = node -> next;
	temp -> next = Node;
	node- > next = NULL;
	
}


// Non recursive way
//Time complexity is 'n' and space complexity is '1'
Node<int>* reverseLinkedList(Node<int> *node)
{
	Node<int> *prev = *curr = *next = NULL;
	curr = Node;	
	while(curr)
	{
		next = curr -> next;
		curr -> next = prev;		
		prev = curr;
		curr = next;
		
	}
	return prev;	
}
==============================================================================================================

//8.3
//Time complexity is 'f' because the list will be interated till the 'f' end point.

Node<int>* reverseSubList( Node<int> *node , int s , int f)
{
	if( s == f) return node;

	Node<int> *dummyHead {0, node};  // make a dummy head 
	Node<int>* sublistHead = dummyhead;
	int count =0;
	while(++count < start)
		sublistHead = sublistHead -> next;
	
	Node<int> *curr = sublistHead -> next, *prev = NULL, *next = NULL;
	while( s++ <= f )
	{
		next = curr -> next;
		curr -> next = prev;
		prev = curr;
		curr = next;	
	}
	
	sublistHead -> next -> next = curr;
	sublistHead -> next = prev;
			
	return dummyHead -> next;
}


============================================================================================================


































