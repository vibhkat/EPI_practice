===========================================================================
//12.1
//Time complexity is 'logn'
//Space complexity is '1'

int firstOccurance(const std::vector<int> &a, const int &k)
{
	int first = -1;
	int start = 0;
	int last = a.size()-1;
	while(start <= last)
	{
		int mid = start +(last - start)/2;
		if( a[mid] > k ) last = mid -1;
		else if( a[mid] < k) start = mid+1;
		else if( a[mid] == k){ first = mid; last = mid-1;}	
	} 
	return first;
}



//Variant 1
//Variant 2 

int localMiniam(const std::vector<int> &a)
{
	bool found = false;
	int minima = -1;
	int start = 0;
	int last = a.size() -1;
	while( last - start > 1)
	{
		int mid = start + (last - start)/2;
		if(a[mid -1] >= a[mid] && a[mid] <=a[mid +1])
		{
			found = true;
			minima = a[mid];		
		}
		else if (a[mid -1] <= a[mid])	last = mid;
		else if (a[mid] >= a[mid +1])   start = mid;
			
	}
	if(found){std::cout<<"found"<<std::endl; return minima;}
	else { std::cout<<"Not found"<<std::endl; return minima;}

}

==============================================================================================================================
//12.4
//Time complexity is 'logn'
//Space complexity is '1'
//This is for distnict elements
int Smallest(stD::vector<int> &a)
{
	int left = 0, right = a.size()-1;
	int mid = left + (right-left)/2;
	while( left < right)  // this will terminate when left and right point to the same element
	{
		if(a[mid] < a[right])	right = mid;
		else if(a[mid] > a[right]) left = mid+1;
	}
	return left;
}



//When there are non-distinct elements
//Time complexity is 'n'
//Space complexity is 'logn'
int SearchSmallest(std::vector<int< &a)
{
	return SmallestHelper(a,0,a.size()-1);
}


int SmallestHelper(std::vector<int> &a , int left, int right)
{
	if(left == right)	return left;
	int mid = left + (right-left)/2;
	if(a[mid] < a[right]) return SmallestHelper(a,left , mid);
	else if(a[mid] > a[right]) return SmallestHelper(a, mid+1 , right);
	else if(a[mid] == a[right])
	{
		int l = SmallestHelper(a, left, mid);
		int r = SmallestHelper(a, mid+1 , right);
		return a[l]<a[r]? l :r ;	
	}
}




=============================================================================================================
//12.5
// Time complexity is 'logk'

int integerSquareRoot(int k)
{
	int l = 0 , r = k;
	while(l < r )
	{
		long mid = l + (r - l )/2;
		if(mid * mid > k) r = mid - 1;
		else ( mid * mid < = k) l = mid + 1;
	}
	return l-1;

}

===============================================================================================================
//12.9
//Time complexity is 'n*n'
int partition(std::vector<int> &v, int lo , int hi)
{
	int i = lo , j = hi+1;
	while( true)
	{
		while(a[++i] > a[lo])
		{
			if( i == hi) break;
		}
		while(a[--j] < a[lo])
		{
			if( j == lo) break;
		}
		if( i >= j) break;

		swap(a , i , j);
	}	
	swap( a , lo , j)
	return j;
}


int kthLargest(std::vector<int> &v , int k)
{
	shuffle(v);
	int lo = 0 , hi = v.size()-1;
	while( lo < hi)
	{
		int p = partition(v,lo, hi);
		if( p == k) return a[p];
		else if( j < k) lo = j+1;
		else if( j > k) hi = j -1;
	}
	return a[k];
}





























